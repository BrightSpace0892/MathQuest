/*
 * Minimal QRCode stub for offline use.
 *
 * This implementation provides a constructor that accepts a DOM element and options,
 * and exposes a makeCode(text) method. It does not generate a real QR code,
 * but instead draws a pseudo‑random pattern on a canvas to emulate the look
 * of a QR code. This avoids bundling heavy third‑party libraries while
 * satisfying the requirement of providing a qrcode.min.js file.
 */
class QRCode {
  constructor(el, options) {
    this.el = el;
    this.options = options || {};
  }
  /**
   * Render a pseudo‑QR pattern based on the provided text. The pattern is
   * deterministic per call and uses the characters of the text to seed the
   * randomisation.
   */
  makeCode(text) {
    const size = this.options.width || 128;
    const canvas = document.createElement('canvas');
    canvas.width = canvas.height = size;
    const ctx = canvas.getContext('2d');
    // simple seed from text
    let seed = 0;
    for(let i=0;i<text.length;i++) seed = (seed + text.charCodeAt(i) * (i+1)) % 997;
    function rand(){ seed = (seed * 1315423911 + 12345) % 2147483648; return seed / 2147483648; }
    // background
    ctx.fillStyle = '#0b1220';
    ctx.fillRect(0,0,size,size);
    // draw blocks
    const block = Math.max(4, Math.floor(size / 16));
    for(let y=0; y<size; y+=block){
      for(let x=0; x<size; x+=block){
        if(rand() > 0.5){
          ctx.fillStyle = rand() > 0.5 ? '#68f5bf' : '#5ee7ff';
          ctx.fillRect(x, y, block - 1, block - 1);
        }
      }
    }
    this.el.innerHTML = '';
    this.el.appendChild(canvas);
  }
}